package com.Revature.data.postgres;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import com.Revature.beans.Car;
import com.Revature.data.CarCollectionDAO;
import com.Revature.utils.ConnectionUtil;

public class CarPostgres implements CarCollectionDAO{
	private ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();


	@Override
	public int create(Car carToAdd) {
int generatedId = 0;
		
		// try-with-resources auto-closes resources
		try (Connection conn = connUtil.getConnection()) {
			// when you run DML statements, you want to manage the TCL
			conn.setAutoCommit(false);
			
			String sql = "insert into car ( yr, make, mdel, vinnum_id) values (? ,? ,? ,? )";
			String sql1 = "insert into car_description (vinnum, cartype, carfuel, enginetype, doors, fuelrange, zeroto60, price)"
					+ "values (? ,? ,? ,? ,? ,? ,? ,? );";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated\
			String[] keys1 = {"vinnum"};
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			PreparedStatement pStmt1 = conn.prepareStatement(sql1, keys1);
			// we need to set the values of the question marks
			
			pStmt1.setString(1, carToAdd.getVinNum());
			pStmt1.setString(2, carToAdd.getCarType());
			pStmt1.setString(3, carToAdd.getCarFuel());
			pStmt1.setString(4, carToAdd.getEngineType());
			pStmt1.setInt(5, carToAdd.getDoors());
			pStmt1.setInt(6, carToAdd.getFuelRange());
			pStmt1.setDouble(7, carToAdd.getZeroTo60());
			pStmt1.setInt(8, carToAdd.getPrice());
			
			pStmt.setInt(1, carToAdd.getYear());
			pStmt.setString(2, carToAdd.getMake());
			pStmt.setString(3, carToAdd.getModel());
			pStmt.setString(4, carToAdd.getVinNum());
			
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			pStmt1.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			ResultSet resultSet1 = pStmt1.getGeneratedKeys();
			
			if (resultSet.next() && resultSet1.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				carToAdd.setId(resultSet.getInt("id"));
				
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return generatedId;
	}

	@Override
	public Car getById(int id) {
	Car car = null;
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where id=? "
					+ " order by id; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				car = new Car();
				car.setId(resultSet.getInt("id"));
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return car;



	}

	@Override
	public Set<Car> getAll() {
		Set<Car> allCars = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			
			String sql = "select * from car   \r\n"
					+ "join car_description on car.vinnum_id = car_description.vinnum\r\n"
					+ "order by id;";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			while (resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				allCars.add(car);	
			}
		
		
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return allCars;
	}

	@Override
	public void update(Car carToUpdate) {
try (Connection conn = connUtil.getConnection()) {
			
	conn.setAutoCommit(false);
	
	String sql = "update car ( yr, make, mdel, vinnum_id) where id='?' values (? ,? ,? ,? )";
	String sql1 = "update into car_description (vinnum, cartype, carfuel, enginetype, doors, fuelrange, zeroto60, price)"
			+ "values (? ,? ,? ,? ,? ,? ,? ,? );";
	String[] keys = {"id"}; // the name of the primary key column that will be autogenerated\
	String[] keys1 = {"vinnum"};
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			PreparedStatement pStmt1 = conn.prepareStatement(sql1, keys1);
			
			
			pStmt.setInt(1, carToUpdate.getId());
			pStmt1.setString(1, carToUpdate.getVinNum());
			pStmt1.setString(2, carToUpdate.getCarType());
			pStmt1.setString(3, carToUpdate.getCarFuel());
			pStmt1.setString(4, carToUpdate.getEngineType());
			pStmt1.setInt(5, carToUpdate.getDoors());
			pStmt1.setInt(6, carToUpdate.getFuelRange());
			pStmt1.setDouble(7, carToUpdate.getZeroTo60());
			pStmt1.setInt(8, carToUpdate.getPrice());
			
				
			pStmt.setInt(2, carToUpdate.getYear());
			pStmt.setString(3, carToUpdate.getMake());
			pStmt.setString(4, carToUpdate.getModel());
			pStmt.setString(5, carToUpdate.getVinNum());
			
			pStmt.executeUpdate();
			pStmt1.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			ResultSet resultSet1 = pStmt1.getGeneratedKeys();
			System.out.println(resultSet +" "+ resultSet1);
			
			if(resultSet.next() && resultSet1.next()) {
				conn.commit();
			} else { 
				conn.rollback();
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	
	}		

	@Override
	public void delete(Car carToDelete) {
		try (Connection conn = connUtil.getConnection()) {
			
			conn.setAutoCommit(false);
			
			String sql = "delete from car where vinnum_id=?;";
			String sql1 = "delete from car_description where vinnum=?;";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated\
			String[] keys1 = {"vinnum"};
					PreparedStatement pStmt = conn.prepareStatement(sql, keys);
					PreparedStatement pStmt1 = conn.prepareStatement(sql1, keys1);
					
					
					pStmt.setString(1, carToDelete.getVinNum());
					pStmt1.setString(1, carToDelete.getVinNum());
				
					pStmt.executeUpdate();
					pStmt1.executeUpdate();
							
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		
	}

	@Override
	public Set<Car> getByMake(String make) {
		
		Set <Car> carsToViewByMake = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where make like '%?%' "
					+ " order by make; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, make);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByMake.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByMake;
	}

	@Override
	public Set<Car> getByModel(String model) {
Set <Car> carsToViewByModel = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where mdel like '%?%' "
					+ " order by mdel; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, model);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByModel.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByModel;
	}


	@Override
	public Set<Car> getByYear(int year) {
Set <Car> carsToViewByYear = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where yr like '%?%' "
					+ " order by id; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, year);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByYear.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByYear;
	}


	@Override
	public Set<Car> getByVinNum(String vinNum) {
Set <Car> carsToViewByVinNum = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where vinnum like '%?%' "
					+ " order by vinnum; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, vinNum);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByVinNum.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByVinNum;
	}

	@Override
	public Set<Car> getByColor(String color) {
Set <Car> carsToViewByColor = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where color like '%?%' "
					+ " order by color; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, color);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByColor.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByColor;
	}


	@Override
	public Set<Car> getByCarType(String carType) {
			Set <Car> carsToViewByCarType = new HashSet<Car>();
					
					try (Connection conn = connUtil.getConnection()) {
						String sql = "select * from car "
								+ " join car_description on car.vinnum_id = car_description.vinnum "
								+ " where cartype like '%?%' "
								+ " order by cartype; ";
						PreparedStatement pStmt = conn.prepareStatement(sql);
						pStmt.setString(1, carType);
						
						ResultSet resultSet = pStmt.executeQuery();
					
						while(resultSet.next()) {
							Car car = new Car();
							car.setYear(resultSet.getInt("yr"));
							car.setMake(resultSet.getString("make"));
							car.setModel(resultSet.getString("mdel"));
							car.setVinNum(resultSet.getString("vinnum"));
							car.setColor(resultSet.getString("color"));
							car.setCarType(resultSet.getString("cartype"));
							car.setCarFuel(resultSet.getString("carfuel"));
							car.setEngineType(resultSet.getString("enginetype"));
							car.setFuelRange(resultSet.getInt("fuelrange"));
							car.setDoors(resultSet.getInt("doors"));
							car.setId(resultSet.getInt("id"));
							car.setPrice(resultSet.getInt("price"));
							car.setZeroTo60(resultSet.getDouble("zeroto60"));
							
							carsToViewByCarType.add(car);
						}
						
						
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					return carsToViewByCarType;
				}
	@Override
	public Set<Car> getByCarFuel(String carFuel) {
			Set <Car> carsToViewByCarFuel = new HashSet<Car>();
					
					try (Connection conn = connUtil.getConnection()) {
						String sql = "select * from car "
								+ " join car_description on car.vinnum_id = car_description.vinnum "
								+ " where carfuel like '%?%' "
								+ " order by carfuel; ";
						PreparedStatement pStmt = conn.prepareStatement(sql);
						pStmt.setString(1, carFuel);
						
						ResultSet resultSet = pStmt.executeQuery();
					
						while(resultSet.next()) {
							Car car = new Car();
							car.setYear(resultSet.getInt("yr"));
							car.setMake(resultSet.getString("make"));
							car.setModel(resultSet.getString("mdel"));
							car.setVinNum(resultSet.getString("vinnum"));
							car.setColor(resultSet.getString("color"));
							car.setCarType(resultSet.getString("cartype"));
							car.setCarFuel(resultSet.getString("carfuel"));
							car.setEngineType(resultSet.getString("enginetype"));
							car.setFuelRange(resultSet.getInt("fuelrange"));
							car.setDoors(resultSet.getInt("doors"));
							car.setId(resultSet.getInt("id"));
							car.setPrice(resultSet.getInt("price"));
							car.setZeroTo60(resultSet.getDouble("zeroto60"));
							
							carsToViewByCarFuel.add(car);
						}
						
						
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					return carsToViewByCarFuel;
				}

	@Override
	public Set<Car> getByDoors(int doors) {
		Set <Car> carsToViewByDoors = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where door=?"
					+ " order by id; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, doors);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByDoors.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByDoors;
	}

	@Override
	public Set<Car> getByPrice(int price) {
		Set <Car> carsToViewByCarFuel = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where price=? "
					+ " order by id; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, price);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByCarFuel.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByCarFuel;
	}

	@Override
	public Set<Car> getByZeroTo60(double zeroTo60) {
		Set <Car> carsToViewByZeroTo60 = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where zeroto60=? "
					+ " order by id; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setDouble(1, zeroTo60);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByZeroTo60.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByZeroTo60;
	
	}

	@Override
	public Set<Car> getByFuelRange(int fuelRange) {
	Set <Car> carsToViewByFuelRange = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where fuelrange=? "
					+ " order by id; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, fuelRange);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByFuelRange.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByFuelRange;
	}

	@Override
	public Set<Car> getByEngineType(String engineType) {
	Set <Car> carsToViewByEngineType = new HashSet<Car>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from car "
					+ " join car_description on car.vinnum_id = car_description.vinnum "
					+ " where enginetype like '%?%' "
					+ " order by enginetype; ";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, engineType);
			
			ResultSet resultSet = pStmt.executeQuery();
		
			while(resultSet.next()) {
				Car car = new Car();
				car.setYear(resultSet.getInt("yr"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("mdel"));
				car.setVinNum(resultSet.getString("vinnum"));
				car.setColor(resultSet.getString("color"));
				car.setCarType(resultSet.getString("cartype"));
				car.setCarFuel(resultSet.getString("carfuel"));
				car.setEngineType(resultSet.getString("enginetype"));
				car.setFuelRange(resultSet.getInt("fuelrange"));
				car.setDoors(resultSet.getInt("doors"));
				car.setId(resultSet.getInt("id"));
				car.setPrice(resultSet.getInt("price"));
				car.setZeroTo60(resultSet.getDouble("zeroto60"));
				
				carsToViewByEngineType.add(car);
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return carsToViewByEngineType;
	}

}
